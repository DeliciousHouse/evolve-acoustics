window.passiveSupported=!1;try{let e=Object.defineProperty({},"passive",{get:function(){return window.passiveSupported=!0}});window.addEventListener("testPassive",null,e),window.removeEventListener("testPassive",null,e),console.log("Passive event listeners are supported")}catch(e){console.log("Passive event listeners are not supported")}window.addPassiveEventListener=function(e,n,o,t=!1,r=!1){var s=["touchstart","touchmove","wheel","mousewheel","touchend"],r=s.includes(n)&&!r||t;let i=!(!window.passiveSupported||!r)&&{passive:!0};return s.includes(n)&&!r&&console.log(`Non-passive event listener added for ${n} (using preventDefault)`),e.addEventListener(n,o,i),function(){e.removeEventListener(n,o,i)}},window.monitorEventPerformance=function(){if(window.PerformanceObserver)try{new PerformanceObserver(e=>{for(var n of e.getEntries())50<n.duration&&n.name.includes("event")&&console.warn(`Long task detected: ${n.name} took ${n.duration.toFixed(2)}ms`)}).observe({entryTypes:["longtask"]}),console.log("Performance monitoring for events initialized")}catch(e){console.log("Performance monitoring not supported in this browser")}},document.addEventListener("DOMContentLoaded",function(){window.monitorEventPerformance()});